def validate_tag_name(value):
    if not re.match(r'^[a-z0-9]+(?:_[a-z0-9]+)*$', value):
        raise ValidationError('El nombre del tag solo puede contener letras en minúscula, números y guiones bajos (underscore), y no puede comenzar ni terminar con un guion bajo.')

class Tag(models.Model):
    class Meta:
        db_table = "tags"
        verbose_name = "Tag"
        verbose_name_plural = 'Tags'
    name = models.CharField(max_length=120, db_index=True, validators=[validate_tag_name])
    description = models.CharField(max_length=255)

    def __str__(self):
        return self.name

class Post(models.Model):

    class Meta:
        db_table = "posts"
        verbose_name = "Post"
        verbose_name_plural = 'Posts'
    title = models.CharField(max_length=200, db_index=True)
    slug = models.SlugField(max_length=230, unique=True, validators=[validate_slug], db_index=True)
    view_count = models.IntegerField(default=0)
    reading_time = models.IntegerField(default=0)
    published = models.BooleanField(default=False)
    content = models.TextField()
    cover_image = models.ImageField(upload_to='posts', storage=ImageKitStorage, null=True, blank=True, validators=[FileExtensionValidator(['jpg', 'jpeg', 'png'])])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    tags = models.ManyToManyField(Tag, blank=True, related_name='posts_tags')

    def __str__(self):
        return self.title
voy a enviar la creacion de una publicacion de esta manera        
{
    "title": "Titulo 1",
    "slug": "titulo-1",
    "reading_time": 1,
    "view_count": 2,
    "content": "lroem",
    "cover_image": "cao.png",
    "tags": [{
        "name": "tag-1",
        "description": "este es el mejor tags"
    }]
}

como puedo crearlo a travez de lo modelos

tengo un este servicio que me permite subir imagenes a un servidor gratuito de imagenes from imgenFree import ImageFree
uploader = ImageFree(
    private_key='your private_key',
    public_key='your public_key',
    url_endpoint = 'your url_endpoint'
)

image_info = uploader.url({
    "path": "/default-image.jpg",
    "url_endpoint": "https://ik.custom.io/your_id/endpoint/",
    "transformation": [{
        "height": "300",
        "width": "400",
        "raw": "ar-4-3,q-40"
    }],
})  y la respuesta que me retorna uploader.url() es {
    'fileId': '631197af51c0c0bdd51f77da',
    'name': 'test-file_X4nk4kIuC.jpg',
    'size': 59,
    'versionInfo': {
        'id': '631197af51c0c0bdd51f77da',
        'name': 'Version 1'
    },
    'filePath': '/test-file_X4nk4kIuC.jpg',
    'url': 'https://ik.custom.io/zv3rkhsym/test-file_X4nk4kIuC.jpg',
    'fileType': 'non-image',
    'AITags': None
} como puedo definir este servidor para subir las imagenes en y reemplazar el storage por defecto de ImageField