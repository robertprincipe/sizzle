import {
  API,
  ConversionConfig,
  PasteConfig,
  SanitizerConfig,
} from "@editorjs/editorjs";
import {
  BlockToolConstructorOptions,
  BlockToolData,
  ToolboxConfig,
  TunesMenuConfig,
} from "@editorjs/editorjs/types/tools";

export default class MiPlugin {
  data: BlockToolData;
  wrapper: HTMLDivElement | undefined;
  settings: any;
  api: API;
  static get toolbox() {
    return {
      title: "Wizzard",
      icon: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bot"><rect width="18" height="10" x="3" y="11" rx="2"></rect><circle cx="12" cy="5" r="2"></circle><path d="M12 7v4"></path><line x1="8" x2="8" y1="16" y2="16"></line><line x1="16" x2="16" y1="16" y2="16"></line></svg>',
    };
  }

  constructor({ data, api }: BlockToolConstructorOptions) {
    this.data = {
      url: data.url || "",
      caption: data.caption || "",
      withBorder: data.withBorder !== undefined ? data.withBorder : false,
      withBackground:
        data.withBackground !== undefined ? data.withBackground : false,
      stretched: data.stretched !== undefined ? data.stretched : false,
    };
    this.api = api;
    this.wrapper = undefined;
    this.settings = [
      {
        name: "withBorder",
        icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z"/></svg>`,
      },
      {
        name: "stretched",
        icon: `<svg width="17" height="10" viewBox="0 0 17 10" xmlns="http://www.w3.org/2000/svg"><path d="M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z"/></svg>`,
      },
      {
        name: "withBackground",
        icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z"/></svg>`,
      },
    ];
  }
  toolbox?: ToolboxConfig | undefined;
  pasteConfig?: false | PasteConfig | undefined;
  conversionConfig?: ConversionConfig | undefined;
  isReadOnlySupported?: boolean | undefined;
  isInline?: boolean | undefined;
  sanitize?: SanitizerConfig | undefined;
  title?: string | undefined;
  prepare?(data: { toolName: string; config: any }): void | Promise<void> {
    throw new Error("Method not implemented.");
  }
  reset?(): void | Promise<void> {
    throw new Error("Method not implemented.");
  }

  render() {
    this.wrapper = document.createElement("div");

    this.wrapper.classList.add("wizzard");

    if (this.data && this.data.url) {
      this._createImage(this.data.url, this.data.caption);
      return this.wrapper;
    }

    const input = document.createElement("input");

    this.wrapper.appendChild(input);

    input.placeholder = "Que contenido quiere crear...";
    input.value = this.data && this.data.url ? this.data.url : "";

    input.addEventListener("paste", (event) => {
      this._createImage(event.clipboardData?.getData("text"));
    });

    return this.wrapper;
  }

  _createImage(url: string | undefined, captionText?: string) {
    const image = document.createElement("img");
    const caption = document.createElement("input");

    image.src = url || "";
    caption.placeholder = "Caption...";
    caption.value = captionText || "";

    if (this.wrapper) {
      this.wrapper.innerHTML = "";
      this.wrapper.appendChild(image);
      this.wrapper.appendChild(caption);
    }

    this._acceptTuneView();
  }

  _acceptTuneView() {
    this.settings.forEach((tune: any) => {
      this.wrapper?.classList.toggle(tune.name, !!this.data[tune.name]);
      if (tune.name === "stretched") {
        this.api.blocks.stretchBlock(
          this.api.blocks.getCurrentBlockIndex(),
          !!this.data.stretched
        );
      }
    });
  }

  static get sanitize() {
    return {
      url: false, // disallow HTML
      caption: {}, // only tags from Inline Toolbar
    };
  }

  save(blockContent: any) {
    const image = blockContent.querySelector("img");
    const caption = blockContent.querySelector("[contenteditable]");

    const sanitizerConfig = {
      b: true,
      a: {
        href: true,
      },
      i: true,
    };

    return Object.assign(this.data, {
      url: image.src,
      caption: this.api.sanitizer.clean(
        caption.innerHTML || "",
        sanitizerConfig
      ),
    });
  }

  renderSettings(): HTMLElement | TunesMenuConfig {
    const wrapper = document.createElement("div");

    this.settings.forEach((tune: any) => {
      let button = document.createElement("div");

      button.classList.add(this.api.styles.settingsButton);
      button.classList.toggle(
        this.api.styles.settingsButtonActive,
        this.data[tune.name]
      );
      button.innerHTML = tune.icon;
      wrapper.appendChild(button);

      button.addEventListener("click", () => {
        this._toggleTune(tune.name);
        button.classList.toggle(this.api.styles.settingsButtonActive);
      });
    });

    return wrapper;
  }

  static get pasteConfig() {
    return {
      tags: ["IMG"],
      files: {
        mimeTypes: ["image/*"],
        extensions: ["gif", "jpg", "png"], // You can specify extensions instead of mime-types
      },
      patterns: {
        image: /https?:\/\/\S+\.(gif|jpe?g|tiff|png)$/i,
      },
    };
  }

  onPaste(event: any) {
    switch (event.type) {
      case "tag":
        const imgTag = event.detail.data;

        this._createImage(imgTag.src);
        break;
      case "file":
        /* We need to read file here as base64 string */
        const file = event.detail.file;
        const reader = new FileReader();

        reader.onload = (loadEvent: any) => {
          this._createImage(loadEvent.target.result);
        };

        reader.readAsDataURL(file);
        break;
      case "pattern":
        const src = event.detail.data;

        this._createImage(src);
        break;
    }
  }

  _toggleTune(tune: any) {
    this.data[tune] = !this.data[tune];
  }

  validate(savedData: any) {
    if (!savedData.url.trim()) {
      return false;
    }

    return true;
  }
}
